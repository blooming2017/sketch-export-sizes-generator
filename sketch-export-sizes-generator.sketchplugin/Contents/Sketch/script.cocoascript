// The MIT License (MIT)
//
// Copyright (c) 2015 Suyeol Jeon (xoul.kr)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


var RecentGeneratedExportableSize = 'RecentGeneratedExportableSize'
var RecentGeneratedExportableScale = 'RecentGeneratedExportableScale'

var SIZES = []; // e.g. [16, 32, 128, 256, 512]
var SCALES = []; // e.g. [1, 2]

var LABEL_WIDTH = 50;
var INPUT_WIDTH = 200;

function createLabelAtIndex(index, text) {
  var y = 30 * index + 5;
  var label = [[NSTextField alloc] initWithFrame:NSMakeRect(0, y, LABEL_WIDTH, 0)];
  label.backgroundColor = NSColor.clearColor();
  label.bordered = false;
  label.selectable = false;
  label.stringValue = text;
  label.sizeToFit();
  return label;
}


function createInputAtIndex(index) {
  var y = 30 * index;
  var textField = [[NSTextField alloc] initWithFrame:NSMakeRect(LABEL_WIDTH, y, INPUT_WIDTH, 24)];
  textField.cell().setWraps(false);
  textField.cell().setScrollable(true);
  textField.cell().setUsesSingleLineMode(true);
  return textField;
}


function numberValuesFromString(string) {
  return string.split(/,\s*/).map(function (str) {
      return parseFloat(str);
  });
}


function prompt() {
  var informativeText = [
    'iOS App Icon',
    '    - Sizes: 29, 40, 60',
    '    - Scales: 2, 3',
    '',
    'Mac App Icon',
    '    - Sizes: 16, 32, 128, 256, 512',
    '    - Scales: 1, 2',
  ].join('\n');
  var alert = [NSAlert alertWithMessageText:'Enter exportable size and scale.'
                              defaultButton:'OK'
                            alternateButton:'Cancel'
                                otherButton:nil
                  informativeTextWithFormat:informativeText];

  var userDefaults = NSUserDefaults.standardUserDefaults();

  var sizeLabel = createLabelAtIndex(1, "Size:");
  var sizeInput = createInputAtIndex(1);
  sizeInput.stringValue = userDefaults.stringForKey(RecentGeneratedExportableSize) || '29, 40, 60';

  var scaleLabel = createLabelAtIndex(0, "Scale:");
  var scaleInput = createInputAtIndex(0);
  scaleInput.stringValue = userDefaults.stringForKey(RecentGeneratedExportableScale) || '2, 3';

  var accessoryView = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, LABEL_WIDTH + INPUT_WIDTH, 60)];
  accessoryView.addSubview(sizeLabel);
  accessoryView.addSubview(sizeInput);
  accessoryView.addSubview(scaleLabel);
  accessoryView.addSubview(scaleInput);
  alert.setAccessoryView(accessoryView);

  var button = alert.runModal();
  if (button == NSAlertDefaultReturn) {
    SIZES = numberValuesFromString(sizeInput.stringValue());
    SCALES = numberValuesFromString(scaleInput.stringValue());

    [userDefaults setValue:sizeInput.stringValue()
                    forKey:RecentGeneratedExportableSize];
    [userDefaults setValue:scaleInput.stringValue()
                    forKey:RecentGeneratedExportableScale];
    [userDefaults synchronize];
  }
}


function compare(a, b) {
  return b - a;
}


function prepareExportSizes(layer) {
  log('=== ' + layer.name() + ' ===');
  log('Remove all export sizes of layer \'' + layer.name() + '\'.');
  var sizes = layer.exportOptions().exportFormats();
  layer.exportOptions().removeAllExportFormats();

  SIZES.sort(compare);
  SCALES.sort(compare);

  for (size of SIZES) {
    for (scale of SCALES) {
      var height = Math.floor(size * scale);
      var suffix = SIZES.length > 1 ? String(size) : "";
      if (scale > 1) {
        suffix += '@' + scale + 'x';
      }
      addExportSize(layer, height, suffix);
    }
  }
}


function addExportSize(layer, height, suffix, format) {
  if (!format) {
    format = 'png';
  }

  log('Add \'' + layer.name() + suffix + '\' (' + height + 'h' + ')');

  var size = layer.exportOptions().addExportFormat();
  size.setFileFormat(format);
  size.setName(suffix);
  size.setScale(height / layer.frame().size().height);
  size.setVisibleScaleType(2); // e.g. 512h
}

var onRun = function(context) {
  var selectedLayers = context.selection;
  var selectedCount = selectedLayers.count();
  var doc = context.document;

  if (selectedCount == 0) {
    log('No layers are selected.');
    var alert = [NSAlert alertWithMessageText:'Oops!'
                              defaultButton:'Cancel'
                            alternateButton:nil
                                otherButton:nil
                  informativeTextWithFormat:'Please select a layer.'];
    alert.runModal();
    return;
  }

  prompt();

  if (SIZES.length == 0) {
    log('No valid sizes.');
    return;
  }

  for (var i = 0; i < selectedCount; i++) {
    var layer = selectedLayers[i];
    
    if (i != 0) {
      log('');
    }
    prepareExportSizes(layer);

    // deselect and reselect all layers to force refresh UI
    doc.currentPage().deselectAllLayers();
    [layer select:true byExpandingSelection:true];
  }

  log('\nDone.');
};
